token S ;
token LXMLDECL ;
token RXMLDECL ;
token LDOCTYPE ;
token XMLAPOS ;
token XMLQUOT ;
token XMLATTVALUE of string ;
token XMLCHARS of string ;
token XMLCDSECT of string ;
token XMLNAME of string ;
token XMLNAME of string ;
token LSTAG of string ;
token RTAG ;
token REMPTYTAG ;
token LETAG of string ;
token LXMLCOMMENT ;
token RXMLCOMMENT ;
token LPI of string ;
token RPI ;
token LBRACKET ;
token RBRACKET ;
token LELEMENTDECL ;
token LATTLISTDECL ;
token LENTITYDECL ;
token LNOTATIONDECL ;
token LPAREN ;
token RPAREN ;
token BAR ;
token QUESTION ;
token STAR ;
token PLUS ;
token COMMA ;
token EQUAL ;

-- [1] document ::= prolog element Misc*
Document. Document ::= Prolog Element [Misc] ;

-- [22] prolog ::= XMLDecl? Misc* (doctypedecl Misc*)?
Prolog1. Prolog ::= [Misc] ;
Prolog2. Prolog ::= XMLDecl [Misc] ;
-- Prolog3. Prolog ::= [Misc] DoctypedeclOpt;
-- Prolog4. Prolog ::= XMLDecl [Misc] DoctypedeclOpt;

-- [23] XMLDecl ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
-- [24] VersionInfo ::= S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')
-- [25] Eq ::= S? '=' S?
-- [26] VersionNum ::= '1.' [0-9]+
-- [32] SDDecl ::= S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))
-- [80] EncodingDecl ::= S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )
-- [81] EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*
XMLDecl. XMLDecl ::= LXMLDECL [PseudoAttr] RXMLDECL ;
PseudoAttr1. PseudoAttr ::= XMLNAME EQUAL XMLAPOS XMLCHARS XMLAPOS ;
PseudoAttr2. PseudoAttr ::= XMLNAME EQUAL XMLQUOT XMLCHARS XMLQUOT ;
separator PseudoAttr "" ;

-- [27] Misc ::= Comment | PI | S
-- TODO
Misc. Misc ::= XMLCHARS ;
separator Misc "" ;

-- [39] element ::= EmptyElemTag | STag content ETag
EmptyElement. Element ::= EmptyElemTag ;
Element.      Element ::= Stag [Content] ETag ;

-- [40] STag ::= '<' Name (S Attribute)* S? '>'
Stag. Stag ::= LSTAG [Attribute] RTAG ;

-- [41] Attribute ::= Name Eq AttValue
Attribute. Attribute ::= XMLNAME EQUAL XMLATTVALUE ;
separator Attribute "" ;

-- [42] ETag ::= '</' Name S? '>'
ETag. ETag ::= LETAG RTAG ;

-- [43] content ::= CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
-- TODO
CharDataContent.  Content ::= XMLCHARS ;
ElementContent.   Content ::= Element ;
-- ReferenceContent. Content ::= ;
CDSectContent.    Content ::= XMLCDSECT ;
-- PIContent.        Content ::= ;
-- COmmentContent.   Content ::= ;
separator Content "" ;

-- [44] EmptyElemTag ::= '<' Name (S Attribute)* S? '/>'
EmptyElemTag. EmptyElemTag ::= LSTAG [Attribute] REMPTYTAG ;
