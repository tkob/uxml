m4_divert(0)dnl
# Setup

    - CM.make "test.cm";
    ...
    val it = true : bool
    - fun parse fileName = (UXML.parseDocument TextIO.StreamIO.input1 ((TextIO.getInstream o TextIO.openIn) fileName); true);
    ...
    val parse = fn : string -> bool
    - fun assert actual expected = actual = expected orelse (print ("expected: " ^ expected ^ ", but got: " ^ actual ^ "\n"); false);
    val assert = fn : string -> string -> bool

# Parse valid stand-alone documents

m4_foreach([file], m4_split(m4_normalize(m4_esyscmd(find xmlconf/xmltest/valid xmlconf/xmltest/invalid -type f -name '*.xml' | grep -v out | sort))), [
m4_bmatch(file,
   [xmlconf/xmltest/valid/sa/049.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/050.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/051.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/052.xml], [## file is skipped because of a unicode char >= $#x10000;
], [[##] file

    - parse "file";
    val it = true : bool

])])

# Write documents as Canonical XML

m4_foreach([file], m4_split(m4_normalize(m4_esyscmd(find xmlconf/xmltest -type f | grep out | sort))), [
m4_bmatch(file,
   [xmlconf/xmltest/valid/not-sa/out/022.xml], [
], [xmlconf/xmltest/valid/sa/out/049.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/out/050.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/out/051.xml], [## file is skipped because of UTF-16
], [xmlconf/xmltest/valid/sa/out/052.xml], [## file is skipped because of a unicode char >= $#x10000;
], [xmlconf/xmltest/valid/sa/out/089.xml], [## file is skipped because of a unicode char >= $#x10000;
], [[##] file

    - val xmlFileName = "m4_chomp(m4_esyscmd(dirname $(dirname file)))/m4_chomp(m4_esyscmd(basename file))";
    ...
    - assert (UXML.toCanon (UXML.parseFile xmlFileName)) (XMLWF.canonicalizeFile "out" xmlFileName);
    val it = true : bool
])])
