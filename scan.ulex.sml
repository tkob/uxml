structure UXMLLexer  = struct

    datatype yystart_state = 
PI | XML | DOCTYPE_PI_CONTENT | XML_COMMENT | DECL | ETAG | STAG | ENTITY_VALUE_APOS | ENTITY_VALUE_QUOT | SYSTEMID_PUBID | DOCTYPE_COMMENT | DOCTYPE_PI | ENTITY_DECL | ATTLIST_APOS | ATTLIST_DECL | ATTLIST_QUOT | CDATA | PI_CONTENT | ATT_APOS | ATT_QUOT | ELEMENT_DECL | NOTATION_DECL | INITIAL | DOCTYPE
    structure UserDeclarations = 
      struct

 
  open Token
  type lex_result = Token.token
  val eof = fn () => EOF
  
  fun xmlCharRef r =
        let
          val (digitStart, radix) =
            if String.isPrefix "&#x" r
            then (3, StringCvt.HEX)
            else (2, StringCvt.DEC)
          val digits = String.extract (r, digitStart, NONE)
        in
          case StringCvt.scanString (Int.scan radix) digits of
               NONE => raise Fail ("StringCvt.scanString failed: " ^ digits)
             | SOME word => XMLCHARREF word
        end

  fun xmlEntityRef r =
        XMLENTITYREF (String.extract (r, 1, SOME (String.size r - 2)))
  
  fun xmlPERef r =
        XMLPEREF (String.extract (r, 1, SOME (String.size r - 2)))

  val stringBuffer : string list ref = ref []
  fun append (sb, s : string) = sb := s :: (!sb)
  fun toString sb = concat (rev (!sb)) before sb := []

  fun drop n s = String.extract(s, n, NONE)
  fun trimQuot s = String.extract (s, 1, SOME (size s - 2))


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
Vector.fromList [([(0w9,0w10,23),
(0w13,0w13,23),
(0w32,0w32,23),
(0w63,0w63,24)], []), ([], []), ([(0w9,0w10,26),
(0w13,0w13,26),
(0w32,0w62,26),
(0w64,0w55295,26),
(0w57344,0w65533,26),
(0w65536,0w1114111,26),
(0w63,0w63,27)], []), ([(0w9,0w10,30),
(0w13,0w13,30),
(0w32,0w44,30),
(0w46,0w55295,30),
(0w57344,0w65533,30),
(0w65536,0w1114111,30),
(0w45,0w45,31)], []), ([(0w9,0w10,36),
(0w13,0w13,36),
(0w32,0w32,36),
(0w62,0w62,37)], []), ([(0w9,0w10,38),
(0w13,0w13,38),
(0w32,0w32,38),
(0w34,0w34,39),
(0w39,0w39,40),
(0w47,0w47,41),
(0w58,0w58,42),
(0w65,0w90,42),
(0w95,0w95,42),
(0w97,0w122,42),
(0w192,0w214,42),
(0w216,0w246,42),
(0w248,0w767,42),
(0w880,0w893,42),
(0w895,0w8191,42),
(0w8204,0w8205,42),
(0w8304,0w8591,42),
(0w11264,0w12271,42),
(0w12289,0w55295,42),
(0w63744,0w64975,42),
(0w65008,0w65533,42),
(0w65536,0w983039,42),
(0w61,0w61,43),
(0w62,0w62,44)], []), ([(0w0,0w36,46),
(0w40,0w2147483647,46),
(0w37,0w37,47),
(0w38,0w38,48),
(0w39,0w39,49)], []), ([(0w0,0w33,59),
(0w35,0w36,59),
(0w39,0w2147483647,59),
(0w34,0w34,60),
(0w37,0w37,61),
(0w38,0w38,62)], []), ([(0w9,0w10,72),
(0w13,0w13,72),
(0w32,0w32,72),
(0w34,0w34,73),
(0w39,0w39,74),
(0w58,0w58,75),
(0w65,0w77,75),
(0w79,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w767,75),
(0w880,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75),
(0w62,0w62,76),
(0w78,0w78,77)], []), ([(0w9,0w10,84),
(0w13,0w13,84),
(0w32,0w44,84),
(0w46,0w55295,84),
(0w57344,0w65533,84),
(0w65536,0w1114111,84),
(0w45,0w45,85)], []), ([(0w9,0w10,90),
(0w13,0w13,90),
(0w32,0w32,90),
(0w63,0w63,91)], []), ([(0w9,0w10,93),
(0w13,0w13,93),
(0w32,0w32,93),
(0w34,0w34,94),
(0w37,0w37,95),
(0w39,0w39,96),
(0w58,0w58,97),
(0w65,0w79,97),
(0w81,0w82,97),
(0w84,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w767,97),
(0w880,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w62,0w62,98),
(0w80,0w80,99),
(0w83,0w83,100)], []), ([(0w0,0w37,111),
(0w40,0w59,111),
(0w61,0w2147483647,111),
(0w38,0w38,112),
(0w39,0w39,113)], []), ([(0w9,0w10,121),
(0w13,0w13,121),
(0w32,0w32,121),
(0w34,0w34,122),
(0w35,0w35,123),
(0w39,0w39,124),
(0w40,0w40,125),
(0w41,0w41,126),
(0w45,0w46,127),
(0w48,0w57,127),
(0w183,0w183,127),
(0w768,0w879,127),
(0w8255,0w8256,127),
(0w58,0w58,128),
(0w65,0w66,128),
(0w68,0w68,128),
(0w70,0w72,128),
(0w74,0w77,128),
(0w79,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w767,128),
(0w880,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w62,0w62,129),
(0w67,0w67,130),
(0w69,0w69,131),
(0w73,0w73,132),
(0w78,0w78,133),
(0w124,0w124,134)], []), ([(0w0,0w33,186),
(0w35,0w37,186),
(0w39,0w59,186),
(0w61,0w2147483647,186),
(0w34,0w34,187),
(0w38,0w38,188)], []), ([(0w9,0w10,196),
(0w13,0w13,196),
(0w32,0w92,196),
(0w94,0w55295,196),
(0w57344,0w65533,196),
(0w65536,0w1114111,196),
(0w93,0w93,197)], []), ([(0w9,0w10,201),
(0w13,0w13,201),
(0w32,0w62,201),
(0w64,0w55295,201),
(0w57344,0w65533,201),
(0w65536,0w1114111,201),
(0w63,0w63,202)], []), ([(0w0,0w37,205),
(0w40,0w59,205),
(0w61,0w2147483647,205),
(0w38,0w38,206),
(0w39,0w39,207)], []), ([(0w0,0w33,215),
(0w35,0w37,215),
(0w39,0w59,215),
(0w61,0w2147483647,215),
(0w34,0w34,216),
(0w38,0w38,217)], []), ([(0w9,0w10,225),
(0w13,0w13,225),
(0w32,0w32,225),
(0w35,0w35,226),
(0w40,0w40,227),
(0w41,0w41,228),
(0w42,0w42,229),
(0w43,0w43,230),
(0w44,0w44,231),
(0w58,0w58,232),
(0w65,0w90,232),
(0w95,0w95,232),
(0w97,0w122,232),
(0w192,0w214,232),
(0w216,0w246,232),
(0w248,0w767,232),
(0w880,0w893,232),
(0w895,0w8191,232),
(0w8204,0w8205,232),
(0w8304,0w8591,232),
(0w11264,0w12271,232),
(0w12289,0w55295,232),
(0w63744,0w64975,232),
(0w65008,0w65533,232),
(0w65536,0w983039,232),
(0w62,0w62,233),
(0w63,0w63,234),
(0w124,0w124,235)], []), ([(0w9,0w10,242),
(0w13,0w13,242),
(0w32,0w32,242),
(0w34,0w34,243),
(0w39,0w39,244),
(0w58,0w58,245),
(0w65,0w79,245),
(0w81,0w82,245),
(0w84,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w767,245),
(0w880,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w62,0w62,246),
(0w80,0w80,247),
(0w83,0w83,248)], []), ([(0w0,0w37,261),
(0w39,0w59,261),
(0w61,0w92,261),
(0w94,0w2147483647,261),
(0w38,0w38,262),
(0w60,0w60,263),
(0w93,0w93,264)], [0]), ([(0w9,0w10,301),
(0w13,0w13,301),
(0w32,0w32,301),
(0w34,0w34,302),
(0w37,0w37,303),
(0w39,0w39,304),
(0w58,0w58,305),
(0w65,0w79,305),
(0w81,0w82,305),
(0w84,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w767,305),
(0w880,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w60,0w60,306),
(0w62,0w62,307),
(0w80,0w80,308),
(0w83,0w83,309),
(0w91,0w91,310),
(0w93,0w93,311)], []), ([(0w9,0w10,23),
(0w13,0w13,23),
(0w32,0w32,23)], [28]), ([(0w62,0w62,25)], []), ([], [29]), ([(0w9,0w10,26),
(0w13,0w13,26),
(0w32,0w62,26),
(0w64,0w55295,26),
(0w57344,0w65533,26),
(0w65536,0w1114111,26),
(0w63,0w63,29)], [128]), ([(0w62,0w62,28)], [129]), ([], [127]), ([], []), ([(0w9,0w10,30),
(0w13,0w13,30),
(0w32,0w44,30),
(0w46,0w55295,30),
(0w57344,0w65533,30),
(0w65536,0w1114111,30),
(0w45,0w45,34)], [27]), ([(0w9,0w10,30),
(0w13,0w13,30),
(0w32,0w44,30),
(0w46,0w55295,30),
(0w57344,0w65533,30),
(0w65536,0w1114111,30),
(0w45,0w45,32)], []), ([(0w62,0w62,33)], []), ([], [26]), ([(0w9,0w10,30),
(0w13,0w13,30),
(0w32,0w44,30),
(0w46,0w55295,30),
(0w57344,0w65533,30),
(0w65536,0w1114111,30),
(0w45,0w45,35)], []), ([], []), ([(0w9,0w10,36),
(0w13,0w13,36),
(0w32,0w32,36)], [24]), ([], [25]), ([(0w9,0w10,38),
(0w13,0w13,38),
(0w32,0w32,38)], [9]), ([], [15]), ([], [14]), ([(0w62,0w62,45)], []), ([(0w45,0w46,42),
(0w48,0w58,42),
(0w65,0w90,42),
(0w95,0w95,42),
(0w97,0w122,42),
(0w183,0w183,42),
(0w192,0w214,42),
(0w216,0w246,42),
(0w248,0w893,42),
(0w895,0w8191,42),
(0w8204,0w8205,42),
(0w8255,0w8256,42),
(0w8304,0w8591,42),
(0w11264,0w12271,42),
(0w12289,0w55295,42),
(0w63744,0w64975,42),
(0w65008,0w65533,42),
(0w65536,0w983039,42)], [10]), ([], [11]), ([], [12]), ([], [13]), ([(0w0,0w36,46),
(0w40,0w2147483647,46)], [105]), ([(0w58,0w58,57),
(0w65,0w90,57),
(0w95,0w95,57),
(0w97,0w122,57),
(0w192,0w214,57),
(0w216,0w246,57),
(0w248,0w767,57),
(0w880,0w893,57),
(0w895,0w8191,57),
(0w8204,0w8205,57),
(0w8304,0w8591,57),
(0w11264,0w12271,57),
(0w12289,0w55295,57),
(0w63744,0w64975,57),
(0w65008,0w65533,57),
(0w65536,0w983039,57)], []), ([(0w35,0w35,50),
(0w58,0w58,51),
(0w65,0w90,51),
(0w95,0w95,51),
(0w97,0w122,51),
(0w192,0w214,51),
(0w216,0w246,51),
(0w248,0w767,51),
(0w880,0w893,51),
(0w895,0w8191,51),
(0w8204,0w8205,51),
(0w8304,0w8591,51),
(0w11264,0w12271,51),
(0w12289,0w55295,51),
(0w63744,0w64975,51),
(0w65008,0w65533,51),
(0w65536,0w983039,51)], []), ([], [109]), ([(0w48,0w57,53),
(0w120,0w120,54)], []), ([(0w45,0w46,51),
(0w48,0w58,51),
(0w65,0w90,51),
(0w95,0w95,51),
(0w97,0w122,51),
(0w183,0w183,51),
(0w192,0w214,51),
(0w216,0w246,51),
(0w248,0w893,51),
(0w895,0w8191,51),
(0w8204,0w8205,51),
(0w8255,0w8256,51),
(0w8304,0w8591,51),
(0w11264,0w12271,51),
(0w12289,0w55295,51),
(0w63744,0w64975,51),
(0w65008,0w65533,51),
(0w65536,0w983039,51),
(0w59,0w59,52)], []), ([], [108]), ([(0w48,0w57,53),
(0w59,0w59,56)], []), ([(0w48,0w57,55),
(0w65,0w70,55),
(0w97,0w102,55)], []), ([(0w48,0w57,55),
(0w65,0w70,55),
(0w97,0w102,55),
(0w59,0w59,56)], []), ([], [107]), ([(0w45,0w46,57),
(0w48,0w58,57),
(0w65,0w90,57),
(0w95,0w95,57),
(0w97,0w122,57),
(0w183,0w183,57),
(0w192,0w214,57),
(0w216,0w246,57),
(0w248,0w893,57),
(0w895,0w8191,57),
(0w8204,0w8205,57),
(0w8255,0w8256,57),
(0w8304,0w8591,57),
(0w11264,0w12271,57),
(0w12289,0w55295,57),
(0w63744,0w64975,57),
(0w65008,0w65533,57),
(0w65536,0w983039,57),
(0w59,0w59,58)], []), ([], [106]), ([(0w0,0w33,59),
(0w35,0w36,59),
(0w39,0w2147483647,59)], [100]), ([], [104]), ([(0w58,0w58,70),
(0w65,0w90,70),
(0w95,0w95,70),
(0w97,0w122,70),
(0w192,0w214,70),
(0w216,0w246,70),
(0w248,0w767,70),
(0w880,0w893,70),
(0w895,0w8191,70),
(0w8204,0w8205,70),
(0w8304,0w8591,70),
(0w11264,0w12271,70),
(0w12289,0w55295,70),
(0w63744,0w64975,70),
(0w65008,0w65533,70),
(0w65536,0w983039,70)], []), ([(0w35,0w35,63),
(0w58,0w58,64),
(0w65,0w90,64),
(0w95,0w95,64),
(0w97,0w122,64),
(0w192,0w214,64),
(0w216,0w246,64),
(0w248,0w767,64),
(0w880,0w893,64),
(0w895,0w8191,64),
(0w8204,0w8205,64),
(0w8304,0w8591,64),
(0w11264,0w12271,64),
(0w12289,0w55295,64),
(0w63744,0w64975,64),
(0w65008,0w65533,64),
(0w65536,0w983039,64)], []), ([(0w48,0w57,66),
(0w120,0w120,67)], []), ([(0w45,0w46,64),
(0w48,0w58,64),
(0w65,0w90,64),
(0w95,0w95,64),
(0w97,0w122,64),
(0w183,0w183,64),
(0w192,0w214,64),
(0w216,0w246,64),
(0w248,0w893,64),
(0w895,0w8191,64),
(0w8204,0w8205,64),
(0w8255,0w8256,64),
(0w8304,0w8591,64),
(0w11264,0w12271,64),
(0w12289,0w55295,64),
(0w63744,0w64975,64),
(0w65008,0w65533,64),
(0w65536,0w983039,64),
(0w59,0w59,65)], []), ([], [103]), ([(0w48,0w57,66),
(0w59,0w59,69)], []), ([(0w48,0w57,68),
(0w65,0w70,68),
(0w97,0w102,68)], []), ([(0w48,0w57,68),
(0w65,0w70,68),
(0w97,0w102,68),
(0w59,0w59,69)], []), ([], [102]), ([(0w45,0w46,70),
(0w48,0w58,70),
(0w65,0w90,70),
(0w95,0w95,70),
(0w97,0w122,70),
(0w183,0w183,70),
(0w192,0w214,70),
(0w216,0w246,70),
(0w248,0w893,70),
(0w895,0w8191,70),
(0w8204,0w8205,70),
(0w8255,0w8256,70),
(0w8304,0w8591,70),
(0w11264,0w12271,70),
(0w12289,0w55295,70),
(0w63744,0w64975,70),
(0w65008,0w65533,70),
(0w65536,0w983039,70),
(0w59,0w59,71)], []), ([], [101]), ([(0w9,0w10,72),
(0w13,0w13,72),
(0w32,0w32,72)], [111]), ([(0w0,0w33,73),
(0w35,0w2147483647,73),
(0w34,0w34,83)], []), ([(0w0,0w38,74),
(0w40,0w2147483647,74),
(0w39,0w39,82)], []), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w65,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75)], [113]), ([], [110]), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w65,0w67,75),
(0w69,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75),
(0w68,0w68,78)], [113]), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w66,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75),
(0w65,0w65,79)], [113]), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w65,0w83,75),
(0w85,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75),
(0w84,0w84,80)], [113]), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w66,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75),
(0w65,0w65,81)], [113]), ([(0w45,0w46,75),
(0w48,0w58,75),
(0w65,0w90,75),
(0w95,0w95,75),
(0w97,0w122,75),
(0w183,0w183,75),
(0w192,0w214,75),
(0w216,0w246,75),
(0w248,0w893,75),
(0w895,0w8191,75),
(0w8204,0w8205,75),
(0w8255,0w8256,75),
(0w8304,0w8591,75),
(0w11264,0w12271,75),
(0w12289,0w55295,75),
(0w63744,0w64975,75),
(0w65008,0w65533,75),
(0w65536,0w983039,75)], [112, 113]), ([], [115]), ([], [114]), ([(0w9,0w10,84),
(0w13,0w13,84),
(0w32,0w44,84),
(0w46,0w55295,84),
(0w57344,0w65533,84),
(0w65536,0w1114111,84),
(0w45,0w45,88)], [124]), ([(0w9,0w10,84),
(0w13,0w13,84),
(0w32,0w44,84),
(0w46,0w55295,84),
(0w57344,0w65533,84),
(0w65536,0w1114111,84),
(0w45,0w45,86)], []), ([(0w62,0w62,87)], []), ([], [123]), ([(0w9,0w10,84),
(0w13,0w13,84),
(0w32,0w44,84),
(0w46,0w55295,84),
(0w57344,0w65533,84),
(0w65536,0w1114111,84),
(0w45,0w45,89)], []), ([], []), ([(0w9,0w10,90),
(0w13,0w13,90),
(0w32,0w32,90)], [125]), ([(0w62,0w62,92)], []), ([], [126]), ([(0w9,0w10,93),
(0w13,0w13,93),
(0w32,0w32,93)], [93]), ([], [98]), ([], [97]), ([], [99]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97)], [96]), ([], [92]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w84,97),
(0w86,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w85,0w85,106)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w88,97),
(0w90,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w89,0w89,101)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w82,97),
(0w84,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w83,0w83,102)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w83,97),
(0w85,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w84,0w84,103)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w68,97),
(0w70,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w69,0w69,104)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w76,97),
(0w78,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w77,0w77,105)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97)], [95, 96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w65,97),
(0w67,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w66,0w66,107)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w75,97),
(0w77,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w76,0w76,108)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w72,97),
(0w74,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w73,0w73,109)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w66,97),
(0w68,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97),
(0w67,0w67,110)], [96]), ([(0w45,0w46,97),
(0w48,0w58,97),
(0w65,0w90,97),
(0w95,0w95,97),
(0w97,0w122,97),
(0w183,0w183,97),
(0w192,0w214,97),
(0w216,0w246,97),
(0w248,0w893,97),
(0w895,0w8191,97),
(0w8204,0w8205,97),
(0w8255,0w8256,97),
(0w8304,0w8591,97),
(0w11264,0w12271,97),
(0w12289,0w55295,97),
(0w63744,0w64975,97),
(0w65008,0w65533,97),
(0w65536,0w983039,97)], [94, 96]), ([(0w0,0w37,111),
(0w40,0w59,111),
(0w61,0w2147483647,111)], [88]), ([(0w35,0w35,114),
(0w58,0w58,115),
(0w65,0w90,115),
(0w95,0w95,115),
(0w97,0w122,115),
(0w192,0w214,115),
(0w216,0w246,115),
(0w248,0w767,115),
(0w880,0w893,115),
(0w895,0w8191,115),
(0w8204,0w8205,115),
(0w8304,0w8591,115),
(0w11264,0w12271,115),
(0w12289,0w55295,115),
(0w63744,0w64975,115),
(0w65008,0w65533,115),
(0w65536,0w983039,115)], []), ([], [91]), ([(0w48,0w57,117),
(0w120,0w120,118)], []), ([(0w45,0w46,115),
(0w48,0w58,115),
(0w65,0w90,115),
(0w95,0w95,115),
(0w97,0w122,115),
(0w183,0w183,115),
(0w192,0w214,115),
(0w216,0w246,115),
(0w248,0w893,115),
(0w895,0w8191,115),
(0w8204,0w8205,115),
(0w8255,0w8256,115),
(0w8304,0w8591,115),
(0w11264,0w12271,115),
(0w12289,0w55295,115),
(0w63744,0w64975,115),
(0w65008,0w65533,115),
(0w65536,0w983039,115),
(0w59,0w59,116)], []), ([], [90]), ([(0w48,0w57,117),
(0w59,0w59,120)], []), ([(0w48,0w57,119),
(0w65,0w70,119),
(0w97,0w102,119)], []), ([(0w48,0w57,119),
(0w65,0w70,119),
(0w97,0w102,119),
(0w59,0w59,120)], []), ([], [89]), ([(0w9,0w10,121),
(0w13,0w13,121),
(0w32,0w32,121)], [64]), ([], [83]), ([(0w70,0w70,166),
(0w73,0w73,167),
(0w82,0w82,168)], []), ([], [82]), ([], [79]), ([], [80]), ([(0w45,0w46,127),
(0w48,0w58,127),
(0w65,0w90,127),
(0w95,0w95,127),
(0w97,0w122,127),
(0w183,0w183,127),
(0w192,0w214,127),
(0w216,0w246,127),
(0w248,0w893,127),
(0w895,0w8191,127),
(0w8204,0w8205,127),
(0w8255,0w8256,127),
(0w8304,0w8591,127),
(0w11264,0w12271,127),
(0w12289,0w55295,127),
(0w63744,0w64975,127),
(0w65008,0w65533,127),
(0w65536,0w983039,127)], [78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [77, 78]), ([], [63]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w67,128),
(0w69,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w68,0w68,162)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w77,128),
(0w79,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w78,0w78,154)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w67,128),
(0w69,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w68,0w68,149)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w76,128),
(0w78,0w78,128),
(0w80,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w77,0w77,135),
(0w79,0w79,136)], [77, 78]), ([], [81]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,143)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,137)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w66,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w65,0w65,138)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,139)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w72,128),
(0w74,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w73,0w73,140)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w78,128),
(0w80,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w79,0w79,141)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w77,128),
(0w79,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w78,0w78,142)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [73, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w78,128),
(0w80,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w79,0w79,144)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w74,128),
(0w76,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w75,0w75,145)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w68,128),
(0w70,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w69,0w69,146)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w77,128),
(0w79,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w78,0w78,147)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w82,128),
(0w84,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w83,0w83,148)], [71, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [72, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w81,128),
(0w83,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w82,0w82,150)], [66, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w68,128),
(0w70,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w69,0w69,151)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w69,128),
(0w71,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w70,0w70,152)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w82,128),
(0w84,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w83,0w83,153)], [67, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [68, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,155)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w72,128),
(0w74,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w73,0w73,156)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,157)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w72,128),
(0w74,0w88,128),
(0w90,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w73,0w73,158),
(0w89,0w89,159)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w68,128),
(0w70,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w69,0w69,160)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [69, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w82,128),
(0w84,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w83,0w83,161)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [70, 77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w66,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w65,0w65,163)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w83,128),
(0w85,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w84,0w84,164)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w66,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128),
(0w65,0w65,165)], [77, 78]), ([(0w45,0w46,128),
(0w48,0w58,128),
(0w65,0w90,128),
(0w95,0w95,128),
(0w97,0w122,128),
(0w183,0w183,128),
(0w192,0w214,128),
(0w216,0w246,128),
(0w248,0w893,128),
(0w895,0w8191,128),
(0w8204,0w8205,128),
(0w8255,0w8256,128),
(0w8304,0w8591,128),
(0w11264,0w12271,128),
(0w12289,0w55295,128),
(0w63744,0w64975,128),
(0w65008,0w65533,128),
(0w65536,0w983039,128)], [65, 77, 78]), ([(0w73,0w73,182)], []), ([(0w77,0w77,176)], []), ([(0w69,0w69,169)], []), ([(0w81,0w81,170)], []), ([(0w85,0w85,171)], []), ([(0w73,0w73,172)], []), ([(0w82,0w82,173)], []), ([(0w69,0w69,174)], []), ([(0w68,0w68,175)], []), ([], [74]), ([(0w80,0w80,177)], []), ([(0w76,0w76,178)], []), ([(0w73,0w73,179)], []), ([(0w69,0w69,180)], []), ([(0w68,0w68,181)], []), ([], [75]), ([(0w88,0w88,183)], []), ([(0w69,0w69,184)], []), ([(0w68,0w68,185)], []), ([], [76]), ([(0w0,0w33,186),
(0w35,0w37,186),
(0w39,0w59,186),
(0w61,0w2147483647,186)], [84]), ([], [87]), ([(0w35,0w35,189),
(0w58,0w58,190),
(0w65,0w90,190),
(0w95,0w95,190),
(0w97,0w122,190),
(0w192,0w214,190),
(0w216,0w246,190),
(0w248,0w767,190),
(0w880,0w893,190),
(0w895,0w8191,190),
(0w8204,0w8205,190),
(0w8304,0w8591,190),
(0w11264,0w12271,190),
(0w12289,0w55295,190),
(0w63744,0w64975,190),
(0w65008,0w65533,190),
(0w65536,0w983039,190)], []), ([(0w48,0w57,192),
(0w120,0w120,193)], []), ([(0w45,0w46,190),
(0w48,0w58,190),
(0w65,0w90,190),
(0w95,0w95,190),
(0w97,0w122,190),
(0w183,0w183,190),
(0w192,0w214,190),
(0w216,0w246,190),
(0w248,0w893,190),
(0w895,0w8191,190),
(0w8204,0w8205,190),
(0w8255,0w8256,190),
(0w8304,0w8591,190),
(0w11264,0w12271,190),
(0w12289,0w55295,190),
(0w63744,0w64975,190),
(0w65008,0w65533,190),
(0w65536,0w983039,190),
(0w59,0w59,191)], []), ([], [86]), ([(0w48,0w57,192),
(0w59,0w59,195)], []), ([(0w48,0w57,194),
(0w65,0w70,194),
(0w97,0w102,194)], []), ([(0w48,0w57,194),
(0w65,0w70,194),
(0w97,0w102,194),
(0w59,0w59,195)], []), ([], [85]), ([(0w9,0w10,196),
(0w13,0w13,196),
(0w32,0w92,196),
(0w94,0w55295,196),
(0w57344,0w65533,196),
(0w65536,0w1114111,196),
(0w93,0w93,200)], [34]), ([(0w93,0w93,198)], [35]), ([(0w62,0w62,199)], []), ([], [33]), ([], []), ([(0w9,0w10,201),
(0w13,0w13,201),
(0w32,0w62,201),
(0w64,0w55295,201),
(0w57344,0w65533,201),
(0w65536,0w1114111,201),
(0w63,0w63,204)], [31]), ([(0w62,0w62,203)], [32]), ([], [30]), ([], []), ([(0w0,0w37,205),
(0w40,0w59,205),
(0w61,0w2147483647,205)], [20]), ([(0w35,0w35,208),
(0w58,0w58,209),
(0w65,0w90,209),
(0w95,0w95,209),
(0w97,0w122,209),
(0w192,0w214,209),
(0w216,0w246,209),
(0w248,0w767,209),
(0w880,0w893,209),
(0w895,0w8191,209),
(0w8204,0w8205,209),
(0w8304,0w8591,209),
(0w11264,0w12271,209),
(0w12289,0w55295,209),
(0w63744,0w64975,209),
(0w65008,0w65533,209),
(0w65536,0w983039,209)], []), ([], [23]), ([(0w48,0w57,211),
(0w120,0w120,212)], []), ([(0w45,0w46,209),
(0w48,0w58,209),
(0w65,0w90,209),
(0w95,0w95,209),
(0w97,0w122,209),
(0w183,0w183,209),
(0w192,0w214,209),
(0w216,0w246,209),
(0w248,0w893,209),
(0w895,0w8191,209),
(0w8204,0w8205,209),
(0w8255,0w8256,209),
(0w8304,0w8591,209),
(0w11264,0w12271,209),
(0w12289,0w55295,209),
(0w63744,0w64975,209),
(0w65008,0w65533,209),
(0w65536,0w983039,209),
(0w59,0w59,210)], []), ([], [22]), ([(0w48,0w57,211),
(0w59,0w59,214)], []), ([(0w48,0w57,213),
(0w65,0w70,213),
(0w97,0w102,213)], []), ([(0w48,0w57,213),
(0w65,0w70,213),
(0w97,0w102,213),
(0w59,0w59,214)], []), ([], [21]), ([(0w0,0w33,215),
(0w35,0w37,215),
(0w39,0w59,215),
(0w61,0w2147483647,215)], [16]), ([], [19]), ([(0w35,0w35,218),
(0w58,0w58,219),
(0w65,0w90,219),
(0w95,0w95,219),
(0w97,0w122,219),
(0w192,0w214,219),
(0w216,0w246,219),
(0w248,0w767,219),
(0w880,0w893,219),
(0w895,0w8191,219),
(0w8204,0w8205,219),
(0w8304,0w8591,219),
(0w11264,0w12271,219),
(0w12289,0w55295,219),
(0w63744,0w64975,219),
(0w65008,0w65533,219),
(0w65536,0w983039,219)], []), ([(0w48,0w57,221),
(0w120,0w120,222)], []), ([(0w45,0w46,219),
(0w48,0w58,219),
(0w65,0w90,219),
(0w95,0w95,219),
(0w97,0w122,219),
(0w183,0w183,219),
(0w192,0w214,219),
(0w216,0w246,219),
(0w248,0w893,219),
(0w895,0w8191,219),
(0w8204,0w8205,219),
(0w8255,0w8256,219),
(0w8304,0w8591,219),
(0w11264,0w12271,219),
(0w12289,0w55295,219),
(0w63744,0w64975,219),
(0w65008,0w65533,219),
(0w65536,0w983039,219),
(0w59,0w59,220)], []), ([], [18]), ([(0w48,0w57,221),
(0w59,0w59,224)], []), ([(0w48,0w57,223),
(0w65,0w70,223),
(0w97,0w102,223)], []), ([(0w48,0w57,223),
(0w65,0w70,223),
(0w97,0w102,223),
(0w59,0w59,224)], []), ([], [17]), ([(0w9,0w10,225),
(0w13,0w13,225),
(0w32,0w32,225)], [53]), ([(0w80,0w80,236)], []), ([], [56]), ([], [57]), ([], [60]), ([], [61]), ([], [62]), ([(0w45,0w46,232),
(0w48,0w58,232),
(0w65,0w90,232),
(0w95,0w95,232),
(0w97,0w122,232),
(0w183,0w183,232),
(0w192,0w214,232),
(0w216,0w246,232),
(0w248,0w893,232),
(0w895,0w8191,232),
(0w8204,0w8205,232),
(0w8255,0w8256,232),
(0w8304,0w8591,232),
(0w11264,0w12271,232),
(0w12289,0w55295,232),
(0w63744,0w64975,232),
(0w65008,0w65533,232),
(0w65536,0w983039,232)], [54]), ([], [52]), ([], [59]), ([], [58]), ([(0w67,0w67,237)], []), ([(0w68,0w68,238)], []), ([(0w65,0w65,239)], []), ([(0w84,0w84,240)], []), ([(0w65,0w65,241)], []), ([], [55]), ([(0w9,0w10,242),
(0w13,0w13,242),
(0w32,0w32,242)], [117]), ([(0w0,0w33,243),
(0w35,0w2147483647,243),
(0w34,0w34,260)], []), ([(0w0,0w38,244),
(0w40,0w2147483647,244),
(0w39,0w39,259)], []), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245)], [120]), ([], [116]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w84,245),
(0w86,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w85,0w85,254)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w88,245),
(0w90,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w89,0w89,249)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w82,245),
(0w84,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w83,0w83,250)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w83,245),
(0w85,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w84,0w84,251)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w68,245),
(0w70,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w69,0w69,252)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w76,245),
(0w78,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w77,0w77,253)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245)], [119, 120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w65,245),
(0w67,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w66,0w66,255)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w75,245),
(0w77,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w76,0w76,256)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w72,245),
(0w74,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w73,0w73,257)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w66,245),
(0w68,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245),
(0w67,0w67,258)], [120]), ([(0w45,0w46,245),
(0w48,0w58,245),
(0w65,0w90,245),
(0w95,0w95,245),
(0w97,0w122,245),
(0w183,0w183,245),
(0w192,0w214,245),
(0w216,0w246,245),
(0w248,0w893,245),
(0w895,0w8191,245),
(0w8204,0w8205,245),
(0w8255,0w8256,245),
(0w8304,0w8591,245),
(0w11264,0w12271,245),
(0w12289,0w55295,245),
(0w63744,0w64975,245),
(0w65008,0w65533,245),
(0w65536,0w983039,245)], [118, 120]), ([], [122]), ([], [121]), ([(0w0,0w37,261),
(0w39,0w59,261),
(0w61,0w92,261),
(0w94,0w2147483647,261),
(0w93,0w93,264)], [0]), ([(0w35,0w35,294),
(0w58,0w58,295),
(0w65,0w90,295),
(0w95,0w95,295),
(0w97,0w122,295),
(0w192,0w214,295),
(0w216,0w246,295),
(0w248,0w767,295),
(0w880,0w893,295),
(0w895,0w8191,295),
(0w8204,0w8205,295),
(0w8304,0w8591,295),
(0w11264,0w12271,295),
(0w12289,0w55295,295),
(0w63744,0w64975,295),
(0w65008,0w65533,295),
(0w65536,0w983039,295)], []), ([(0w33,0w33,269),
(0w47,0w47,270),
(0w58,0w58,271),
(0w65,0w90,271),
(0w95,0w95,271),
(0w97,0w122,271),
(0w192,0w214,271),
(0w216,0w246,271),
(0w248,0w767,271),
(0w880,0w893,271),
(0w895,0w8191,271),
(0w8204,0w8205,271),
(0w8304,0w8591,271),
(0w11264,0w12271,271),
(0w12289,0w55295,271),
(0w63744,0w64975,271),
(0w65008,0w65533,271),
(0w65536,0w983039,271),
(0w63,0w63,272)], []), ([(0w0,0w37,261),
(0w39,0w59,261),
(0w61,0w92,261),
(0w94,0w2147483647,261),
(0w93,0w93,265)], [0]), ([(0w0,0w37,261),
(0w39,0w59,261),
(0w61,0w61,261),
(0w63,0w92,261),
(0w94,0w2147483647,261),
(0w62,0w62,266),
(0w93,0w93,265)], [0]), ([(0w0,0w37,266),
(0w39,0w59,266),
(0w61,0w92,266),
(0w94,0w2147483647,266),
(0w93,0w93,267)], []), ([(0w0,0w37,266),
(0w39,0w59,266),
(0w61,0w92,266),
(0w94,0w2147483647,266),
(0w93,0w93,268)], []), ([(0w0,0w37,266),
(0w39,0w59,266),
(0w61,0w92,266),
(0w94,0w2147483647,266),
(0w93,0w93,268)], []), ([(0w45,0w45,278),
(0w68,0w68,279),
(0w91,0w91,280)], []), ([(0w58,0w58,277),
(0w65,0w90,277),
(0w95,0w95,277),
(0w97,0w122,277),
(0w192,0w214,277),
(0w216,0w246,277),
(0w248,0w767,277),
(0w880,0w893,277),
(0w895,0w8191,277),
(0w8204,0w8205,277),
(0w8304,0w8591,277),
(0w11264,0w12271,277),
(0w12289,0w55295,277),
(0w63744,0w64975,277),
(0w65008,0w65533,277),
(0w65536,0w983039,277)], []), ([(0w45,0w46,271),
(0w48,0w58,271),
(0w65,0w90,271),
(0w95,0w95,271),
(0w97,0w122,271),
(0w183,0w183,271),
(0w192,0w214,271),
(0w216,0w246,271),
(0w248,0w893,271),
(0w895,0w8191,271),
(0w8204,0w8205,271),
(0w8255,0w8256,271),
(0w8304,0w8591,271),
(0w11264,0w12271,271),
(0w12289,0w55295,271),
(0w63744,0w64975,271),
(0w65008,0w65533,271),
(0w65536,0w983039,271)], [1]), ([(0w58,0w58,273),
(0w65,0w87,273),
(0w89,0w90,273),
(0w95,0w95,273),
(0w97,0w119,273),
(0w121,0w122,273),
(0w192,0w214,273),
(0w216,0w246,273),
(0w248,0w767,273),
(0w880,0w893,273),
(0w895,0w8191,273),
(0w8204,0w8205,273),
(0w8304,0w8591,273),
(0w11264,0w12271,273),
(0w12289,0w55295,273),
(0w63744,0w64975,273),
(0w65008,0w65533,273),
(0w65536,0w983039,273),
(0w88,0w88,274),
(0w120,0w120,274)], []), ([(0w45,0w46,273),
(0w48,0w58,273),
(0w65,0w90,273),
(0w95,0w95,273),
(0w97,0w122,273),
(0w183,0w183,273),
(0w192,0w214,273),
(0w216,0w246,273),
(0w248,0w893,273),
(0w895,0w8191,273),
(0w8204,0w8205,273),
(0w8255,0w8256,273),
(0w8304,0w8591,273),
(0w11264,0w12271,273),
(0w12289,0w55295,273),
(0w63744,0w64975,273),
(0w65008,0w65533,273),
(0w65536,0w983039,273)], [7]), ([(0w45,0w46,273),
(0w48,0w58,273),
(0w65,0w76,273),
(0w78,0w90,273),
(0w95,0w95,273),
(0w97,0w108,273),
(0w110,0w122,273),
(0w183,0w183,273),
(0w192,0w214,273),
(0w216,0w246,273),
(0w248,0w893,273),
(0w895,0w8191,273),
(0w8204,0w8205,273),
(0w8255,0w8256,273),
(0w8304,0w8591,273),
(0w11264,0w12271,273),
(0w12289,0w55295,273),
(0w63744,0w64975,273),
(0w65008,0w65533,273),
(0w65536,0w983039,273),
(0w77,0w77,275),
(0w109,0w109,275)], [7]), ([(0w45,0w46,273),
(0w48,0w58,273),
(0w65,0w75,273),
(0w77,0w90,273),
(0w95,0w95,273),
(0w97,0w107,273),
(0w109,0w122,273),
(0w183,0w183,273),
(0w192,0w214,273),
(0w216,0w246,273),
(0w248,0w893,273),
(0w895,0w8191,273),
(0w8204,0w8205,273),
(0w8255,0w8256,273),
(0w8304,0w8591,273),
(0w11264,0w12271,273),
(0w12289,0w55295,273),
(0w63744,0w64975,273),
(0w65008,0w65533,273),
(0w65536,0w983039,273),
(0w76,0w76,276),
(0w108,0w108,276)], [7]), ([(0w45,0w46,273),
(0w48,0w58,273),
(0w65,0w90,273),
(0w95,0w95,273),
(0w97,0w122,273),
(0w183,0w183,273),
(0w192,0w214,273),
(0w216,0w246,273),
(0w248,0w893,273),
(0w895,0w8191,273),
(0w8204,0w8205,273),
(0w8255,0w8256,273),
(0w8304,0w8591,273),
(0w11264,0w12271,273),
(0w12289,0w55295,273),
(0w63744,0w64975,273),
(0w65008,0w65533,273),
(0w65536,0w983039,273)], []), ([(0w45,0w46,277),
(0w48,0w58,277),
(0w65,0w90,277),
(0w95,0w95,277),
(0w97,0w122,277),
(0w183,0w183,277),
(0w192,0w214,277),
(0w216,0w246,277),
(0w248,0w893,277),
(0w895,0w8191,277),
(0w8204,0w8205,277),
(0w8255,0w8256,277),
(0w8304,0w8591,277),
(0w11264,0w12271,277),
(0w12289,0w55295,277),
(0w63744,0w64975,277),
(0w65008,0w65533,277),
(0w65536,0w983039,277)], [2]), ([(0w45,0w45,293)], []), ([(0w79,0w79,287)], []), ([(0w67,0w67,281)], []), ([(0w68,0w68,282)], []), ([(0w65,0w65,283)], []), ([(0w84,0w84,284)], []), ([(0w65,0w65,285)], []), ([(0w91,0w91,286)], []), ([], [5]), ([(0w67,0w67,288)], []), ([(0w84,0w84,289)], []), ([(0w89,0w89,290)], []), ([(0w80,0w80,291)], []), ([(0w69,0w69,292)], []), ([], [8]), ([], [6]), ([(0w48,0w57,297),
(0w120,0w120,298)], []), ([(0w45,0w46,295),
(0w48,0w58,295),
(0w65,0w90,295),
(0w95,0w95,295),
(0w97,0w122,295),
(0w183,0w183,295),
(0w192,0w214,295),
(0w216,0w246,295),
(0w248,0w893,295),
(0w895,0w8191,295),
(0w8204,0w8205,295),
(0w8255,0w8256,295),
(0w8304,0w8591,295),
(0w11264,0w12271,295),
(0w12289,0w55295,295),
(0w63744,0w64975,295),
(0w65008,0w65533,295),
(0w65536,0w983039,295),
(0w59,0w59,296)], []), ([], [4]), ([(0w48,0w57,297),
(0w59,0w59,300)], []), ([(0w48,0w57,299),
(0w65,0w70,299),
(0w97,0w102,299)], []), ([(0w48,0w57,299),
(0w65,0w70,299),
(0w97,0w102,299),
(0w59,0w59,300)], []), ([], [3]), ([(0w9,0w10,301),
(0w13,0w13,301),
(0w32,0w32,301)], [37]), ([(0w0,0w33,302),
(0w35,0w2147483647,302),
(0w34,0w34,360)], []), ([(0w58,0w58,358),
(0w65,0w90,358),
(0w95,0w95,358),
(0w97,0w122,358),
(0w192,0w214,358),
(0w216,0w246,358),
(0w248,0w767,358),
(0w880,0w893,358),
(0w895,0w8191,358),
(0w8204,0w8205,358),
(0w8304,0w8591,358),
(0w11264,0w12271,358),
(0w12289,0w55295,358),
(0w63744,0w64975,358),
(0w65008,0w65533,358),
(0w65536,0w983039,358)], []), ([(0w0,0w38,304),
(0w40,0w2147483647,304),
(0w39,0w39,357)], []), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305)], [41]), ([(0w33,0w33,322),
(0w63,0w63,323)], []), ([], [36]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w84,305),
(0w86,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w85,0w85,317)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w88,305),
(0w90,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w89,0w89,312)], [41]), ([], [42]), ([], [43]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w82,305),
(0w84,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w83,0w83,313)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w83,305),
(0w85,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w84,0w84,314)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w68,305),
(0w70,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w69,0w69,315)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w76,305),
(0w78,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w77,0w77,316)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305)], [40, 41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w65,305),
(0w67,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w66,0w66,318)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w75,305),
(0w77,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w76,0w76,319)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w72,305),
(0w74,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w73,0w73,320)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w66,305),
(0w68,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305),
(0w67,0w67,321)], [41]), ([(0w45,0w46,305),
(0w48,0w58,305),
(0w65,0w90,305),
(0w95,0w95,305),
(0w97,0w122,305),
(0w183,0w183,305),
(0w192,0w214,305),
(0w216,0w246,305),
(0w248,0w893,305),
(0w895,0w8191,305),
(0w8204,0w8205,305),
(0w8255,0w8256,305),
(0w8304,0w8591,305),
(0w11264,0w12271,305),
(0w12289,0w55295,305),
(0w63744,0w64975,305),
(0w65008,0w65533,305),
(0w65536,0w983039,305)], [39, 41]), ([(0w45,0w45,328),
(0w65,0w65,329),
(0w69,0w69,330),
(0w78,0w78,331)], []), ([(0w58,0w58,324),
(0w65,0w87,324),
(0w89,0w90,324),
(0w95,0w95,324),
(0w97,0w119,324),
(0w121,0w122,324),
(0w192,0w214,324),
(0w216,0w246,324),
(0w248,0w767,324),
(0w880,0w893,324),
(0w895,0w8191,324),
(0w8204,0w8205,324),
(0w8304,0w8591,324),
(0w11264,0w12271,324),
(0w12289,0w55295,324),
(0w63744,0w64975,324),
(0w65008,0w65533,324),
(0w65536,0w983039,324),
(0w88,0w88,325),
(0w120,0w120,325)], []), ([(0w45,0w46,324),
(0w48,0w58,324),
(0w65,0w90,324),
(0w95,0w95,324),
(0w97,0w122,324),
(0w183,0w183,324),
(0w192,0w214,324),
(0w216,0w246,324),
(0w248,0w893,324),
(0w895,0w8191,324),
(0w8204,0w8205,324),
(0w8255,0w8256,324),
(0w8304,0w8591,324),
(0w11264,0w12271,324),
(0w12289,0w55295,324),
(0w63744,0w64975,324),
(0w65008,0w65533,324),
(0w65536,0w983039,324)], [48]), ([(0w45,0w46,324),
(0w48,0w58,324),
(0w65,0w76,324),
(0w78,0w90,324),
(0w95,0w95,324),
(0w97,0w108,324),
(0w110,0w122,324),
(0w183,0w183,324),
(0w192,0w214,324),
(0w216,0w246,324),
(0w248,0w893,324),
(0w895,0w8191,324),
(0w8204,0w8205,324),
(0w8255,0w8256,324),
(0w8304,0w8591,324),
(0w11264,0w12271,324),
(0w12289,0w55295,324),
(0w63744,0w64975,324),
(0w65008,0w65533,324),
(0w65536,0w983039,324),
(0w77,0w77,326),
(0w109,0w109,326)], [48]), ([(0w45,0w46,324),
(0w48,0w58,324),
(0w65,0w75,324),
(0w77,0w90,324),
(0w95,0w95,324),
(0w97,0w107,324),
(0w109,0w122,324),
(0w183,0w183,324),
(0w192,0w214,324),
(0w216,0w246,324),
(0w248,0w893,324),
(0w895,0w8191,324),
(0w8204,0w8205,324),
(0w8255,0w8256,324),
(0w8304,0w8591,324),
(0w11264,0w12271,324),
(0w12289,0w55295,324),
(0w63744,0w64975,324),
(0w65008,0w65533,324),
(0w65536,0w983039,324),
(0w76,0w76,327),
(0w108,0w108,327)], [48]), ([(0w45,0w46,324),
(0w48,0w58,324),
(0w65,0w90,324),
(0w95,0w95,324),
(0w97,0w122,324),
(0w183,0w183,324),
(0w192,0w214,324),
(0w216,0w246,324),
(0w248,0w893,324),
(0w895,0w8191,324),
(0w8204,0w8205,324),
(0w8255,0w8256,324),
(0w8304,0w8591,324),
(0w11264,0w12271,324),
(0w12289,0w55295,324),
(0w63744,0w64975,324),
(0w65008,0w65533,324),
(0w65536,0w983039,324)], []), ([(0w45,0w45,356)], []), ([(0w84,0w84,350)], []), ([(0w76,0w76,339),
(0w78,0w78,340)], []), ([(0w79,0w79,332)], []), ([(0w84,0w84,333)], []), ([(0w65,0w65,334)], []), ([(0w84,0w84,335)], []), ([(0w73,0w73,336)], []), ([(0w79,0w79,337)], []), ([(0w78,0w78,338)], []), ([], [47]), ([(0w69,0w69,345)], []), ([(0w84,0w84,341)], []), ([(0w73,0w73,342)], []), ([(0w84,0w84,343)], []), ([(0w89,0w89,344)], []), ([], [46]), ([(0w77,0w77,346)], []), ([(0w69,0w69,347)], []), ([(0w78,0w78,348)], []), ([(0w84,0w84,349)], []), ([], [44]), ([(0w84,0w84,351)], []), ([(0w76,0w76,352)], []), ([(0w73,0w73,353)], []), ([(0w83,0w83,354)], []), ([(0w84,0w84,355)], []), ([], [45]), ([], [49]), ([], [51]), ([(0w45,0w46,358),
(0w48,0w58,358),
(0w65,0w90,358),
(0w95,0w95,358),
(0w97,0w122,358),
(0w183,0w183,358),
(0w192,0w214,358),
(0w216,0w246,358),
(0w248,0w893,358),
(0w895,0w8191,358),
(0w8204,0w8205,358),
(0w8255,0w8256,358),
(0w8304,0w8591,358),
(0w11264,0w12271,358),
(0w12289,0w55295,358),
(0w63744,0w64975,358),
(0w65008,0w65533,358),
(0w65536,0w983039,358),
(0w59,0w59,359)], []), ([], [38]), ([], [50])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction1 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  YYBEGIN STAG; LSTAG(drop 1 yytext)
      end
fun yyAction2 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  YYBEGIN ETAG; LETAG(drop 2 yytext)
      end
fun yyAction3 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction4 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN CDATA; continue())
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN XML_COMMENT; LXMLCOMMENT)
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  YYBEGIN PI; LPI(drop 2 yytext)
      end
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; LDOCTYPE)
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;  EQUAL)
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RTAG)
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; REMPTYTAG)
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATT_APOS; continue())
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATT_QUOT; continue())
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN STAG; continue())
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN STAG; continue())
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RTAG)
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RXMLCOMMENT)
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN PI_CONTENT; continue())
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RPI)
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RPI)
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; XMLCDSECT (toString stringBuffer))
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  append (stringBuffer, yytext); continue ()
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  append (stringBuffer, yytext); continue ()
      end
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN INITIAL; RTAG)
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlPERef yytext
      end
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;  PUBLIC)
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;  SYSTEM)
fun yyAction41 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;  LBRACKET)
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;  RBRACKET)
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;
      YYBEGIN ELEMENT_DECL; LELEMENTDECL )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
      YYBEGIN ATTLIST_DECL; LATTLISTDECL )
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;
      YYBEGIN ENTITY_DECL;  LENTITYDECL  )
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
      YYBEGIN NOTATION_DECL;LNOTATIONDECL)
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  YYBEGIN DOCTYPE_PI; LPI(drop 2 yytext)
      end
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;
      YYBEGIN DOCTYPE_COMMENT; continue())
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction51 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RTAG)
fun yyAction53 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction56 (strm, lastMatch : yymatch) = (yystrm := strm;  LPAREN)
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm;  RPAREN)
fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm;  BAR)
fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm;  QUESTION)
fun yyAction60 (strm, lastMatch : yymatch) = (yystrm := strm;  STAR)
fun yyAction61 (strm, lastMatch : yymatch) = (yystrm := strm;  PLUS)
fun yyAction62 (strm, lastMatch : yymatch) = (yystrm := strm;  COMMA)
fun yyAction63 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RTAG)
fun yyAction64 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction65 (strm, lastMatch : yymatch) = (yystrm := strm;  CDATA_KW)
fun yyAction66 (strm, lastMatch : yymatch) = (yystrm := strm;  ID)
fun yyAction67 (strm, lastMatch : yymatch) = (yystrm := strm;  IDREF)
fun yyAction68 (strm, lastMatch : yymatch) = (yystrm := strm;  IDREFS)
fun yyAction69 (strm, lastMatch : yymatch) = (yystrm := strm;  ENTITY)
fun yyAction70 (strm, lastMatch : yymatch) = (yystrm := strm;  ENTITIES)
fun yyAction71 (strm, lastMatch : yymatch) = (yystrm := strm;  NMTOKEN)
fun yyAction72 (strm, lastMatch : yymatch) = (yystrm := strm;  NMTOKENS)
fun yyAction73 (strm, lastMatch : yymatch) = (yystrm := strm;  NOTATION)
fun yyAction74 (strm, lastMatch : yymatch) = (yystrm := strm;  REQUIRED)
fun yyAction75 (strm, lastMatch : yymatch) = (yystrm := strm;  IMPLIED)
fun yyAction76 (strm, lastMatch : yymatch) = (yystrm := strm;  FIXED)
fun yyAction77 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction78 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction79 (strm, lastMatch : yymatch) = (yystrm := strm;  LPAREN)
fun yyAction80 (strm, lastMatch : yymatch) = (yystrm := strm;  RPAREN)
fun yyAction81 (strm, lastMatch : yymatch) = (yystrm := strm;  BAR)
fun yyAction82 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATTLIST_APOS; continue())
fun yyAction83 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATTLIST_QUOT; continue())
fun yyAction84 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction85 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction86 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction87 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATTLIST_DECL; continue())
fun yyAction88 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction89 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction90 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction91 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ATTLIST_DECL; continue())
fun yyAction92 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RTAG)
fun yyAction93 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction94 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN SYSTEMID_PUBID; PUBLIC)
fun yyAction95 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN SYSTEMID_PUBID; SYSTEM)
fun yyAction96 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction97 (strm, lastMatch : yymatch) = (yystrm := strm;  PERCENT)
fun yyAction98 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ENTITY_VALUE_QUOT; continue())
fun yyAction99 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ENTITY_VALUE_APOS; continue())
fun yyAction100 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction101 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlPERef yytext
      end
fun yyAction102 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction103 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction104 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ENTITY_DECL; continue())
fun yyAction105 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction106 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlPERef yytext
      end
fun yyAction107 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlCharRef yytext
      end
fun yyAction108 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  xmlEntityRef yytext
      end
fun yyAction109 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN ENTITY_DECL; continue())
fun yyAction110 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RTAG)
fun yyAction111 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction112 (strm, lastMatch : yymatch) = (yystrm := strm;  NDATA)
fun yyAction113 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction114 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction115 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction116 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RTAG)
fun yyAction117 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction118 (strm, lastMatch : yymatch) = (yystrm := strm;  PUBLIC)
fun yyAction119 (strm, lastMatch : yymatch) = (yystrm := strm;  SYSTEM)
fun yyAction120 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLNAME(yytext)
      end
fun yyAction121 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction122 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(trimQuot yytext)
      end
fun yyAction123 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; continue())
fun yyAction124 (strm, lastMatch : yymatch) = (yystrm := strm;  continue())
fun yyAction125 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE_PI_CONTENT; continue())
fun yyAction126 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RPI)
fun yyAction127 (strm, lastMatch : yymatch) = (yystrm := strm;
       YYBEGIN DOCTYPE; RPI)
fun yyAction128 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
fun yyAction129 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  XMLCHARS(yytext)
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104, yyAction105, yyAction106,
  yyAction107, yyAction108, yyAction109, yyAction110, yyAction111, yyAction112,
  yyAction113, yyAction114, yyAction115, yyAction116, yyAction117, yyAction118,
  yyAction119, yyAction120, yyAction121, yyAction122, yyAction123, yyAction124,
  yyAction125, yyAction126, yyAction127, yyAction128, yyAction129])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of PI => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | XML => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | DOCTYPE_PI_CONTENT => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | XML_COMMENT => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
        | DECL => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | ETAG => yygo yyactTable (4, !(yystrm), yyNO_MATCH)
        | STAG => yygo yyactTable (5, !(yystrm), yyNO_MATCH)
        | ENTITY_VALUE_APOS => yygo yyactTable (6, !(yystrm), yyNO_MATCH)
        | ENTITY_VALUE_QUOT => yygo yyactTable (7, !(yystrm), yyNO_MATCH)
        | SYSTEMID_PUBID => yygo yyactTable (8, !(yystrm), yyNO_MATCH)
        | DOCTYPE_COMMENT => yygo yyactTable (9, !(yystrm), yyNO_MATCH)
        | DOCTYPE_PI => yygo yyactTable (10, !(yystrm), yyNO_MATCH)
        | ENTITY_DECL => yygo yyactTable (11, !(yystrm), yyNO_MATCH)
        | ATTLIST_APOS => yygo yyactTable (12, !(yystrm), yyNO_MATCH)
        | ATTLIST_DECL => yygo yyactTable (13, !(yystrm), yyNO_MATCH)
        | ATTLIST_QUOT => yygo yyactTable (14, !(yystrm), yyNO_MATCH)
        | CDATA => yygo yyactTable (15, !(yystrm), yyNO_MATCH)
        | PI_CONTENT => yygo yyactTable (16, !(yystrm), yyNO_MATCH)
        | ATT_APOS => yygo yyactTable (17, !(yystrm), yyNO_MATCH)
        | ATT_QUOT => yygo yyactTable (18, !(yystrm), yyNO_MATCH)
        | ELEMENT_DECL => yygo yyactTable (19, !(yystrm), yyNO_MATCH)
        | NOTATION_DECL => yygo yyactTable (20, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (21, !(yystrm), yyNO_MATCH)
        | DOCTYPE => yygo yyactTable (22, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
